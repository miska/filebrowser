<%pre>
#include <unistd.h>
#include <vector>
#include <algorithm>
#include <cxxtools/directory.h>
#include <cxxtools/fileinfo.h>
#include <cxxtools/file.h>
#include <tnt/urlescostream.h>

#include "action.h"

#define asset_ico(ico) (std::string("/assets/icons/") + ico + ".svg")
#define api_url "/api/"

</%pre>
<%thread scope="global">
std::map<std::string, Action> actions;
std::string default_dir  = "goto";
std::string default_file = "";
bool init = true;
</%thread>
<%args>
std::string target;
std::string action;
</%args>
<%session>
std::string home;
std::string cwd;
</%session>
<%cpp>
if(home.empty()) {
    char* buff = get_current_dir_name();
    home = buff;
    free(buff);
    buff = NULL;
}
if(cwd.compare(0, home.length(), home) != 0) {
    cwd = home;
}
if(init) {
    Action tmp;
    tmp.meta = Action_Meta({ "goto", "none", true, false, false});
    tmp.action = [&cwd](std::string t) -> std::string {
                       if(t != "..") {
                           cwd = t;
                       } else {
                           cwd = cxxtools::FileInfo(cwd).dirName();
                           cwd.pop_back();
                       }
                       return "{ \"reload\": true }";
                   };
    actions.emplace("goto", tmp);
    tmp.meta = Action_Meta({ "delete", "trash", false, true, true});
    tmp.action = [](std::string t) {
                       auto f = cxxtools::File(t);
                       std::string ret = f.baseName();
                       f.remove();
                       return "{ \"reload\": true, \"notice\": \"File '" + ret + "' deleted...\" }";
                   };
    actions.emplace("delete", tmp);
    init = false;
}

if(!target.empty()) {
    auto it = actions.find(action);
    if(it != actions.end()) {
</%cpp>
<$$     it->second.action(target) $>
<%cpp>
        return HTTP_OK;
    }
}
if(cwd.compare(0, home.length(), home) != 0) {
    cwd = home;
}
if(action == "render") {
std::vector <cxxtools::FileInfo> content;
cxxtools::Directory d(cwd);
for(auto i = d.begin(true); i != d.end(); ++i)
    content.push_back(cxxtools::FileInfo(i));
std::sort(content.begin(), content.end(), [](auto i, auto j) -> bool {
    if(i.isDirectory() && !j.isDirectory())
        return true;
    if(!i.isDirectory() && j.isDirectory())
        return false;
    return i.name() < j.name();
});
</%cpp>
  <table>
   <tr>
    <th><a onClick="filebrowser_api_call('goto', '<$ tnt::urlEscape(home) $>');" href="#"><img class="filebrowser_icon" src="<$ asset_ico("home") $>"/></a></th>
    <th><$ d.name() $></th>
    <th><a onClick="filebrowser_reload()" href="#"><img class="filebrowser_icon" src="<$ asset_ico("refresh") $>"/></a></th>
   </tr>
% int j = 0;
% if(cwd != home) {
%     j = 1;
   <tr class="odd">
    <td class="ico"><img class="filebrowser_icon" src="<$ asset_ico("up") $>"/></td>
    <td><a  onClick="filebrowser_api_call('goto', '..');" href="#">..</a></td>
    <td/>
   </tr>
% }
% for(auto i : content) {
%  j = (j+1)%2;
   <tr class="<$ j == 1 ? "odd" : "even" $>">
% if(i.isDirectory()) {
    <td class="ico"><img class="filebrowser_icon" src="<$ asset_ico("folder") $>"/></td>
    <td>
%    if(!default_dir.empty()) {
     <a onClick="filebrowser_api_call('<$ default_dir $>', '<$ tnt::urlEscape(i.path()) $>');" href="#">
%    }
% } else {
    <td class="ico"><img class="filebrowser_icon" src="<$ asset_ico("file") $>"/></td>
    <td>
%    if(!default_file.empty()) {
     <a onClick="filebrowser_api_call('<$ default_file $>', '<$ tnt::urlEscape(i.path()) $>');" href="#">
%    }
% }
      <$ i.name() $>
% if((i.isDirectory() && !default_dir.empty()) || (!i.isDirectory() && !default_file.empty())) {
     </a>
% }
    </td>
    <td class="ico">
% for(auto j : actions) {
%    auto jm = j.second.meta;
%    if((jm.for_dir  &&  i.isDirectory() && (jm.show_default || j.first != default_dir)) ||
%       (jm.for_file && !i.isDirectory() && (jm.show_default || j.first != default_file))) {
     <a onClick="filebrowser_api_call('<$ j.first $>', '<$ tnt::urlEscape(i.path()) $>');" href="#">
      <img class="filebrowser_icon" src="<$ asset_ico(jm.icon) $>"/>
     </a>
%    }
% }
    </td>
   </tr>
% }
  </table>
 </div>
</div>
% } else {
  Error: Incorect action
% }
<#



#>
<%def include>
<script src="/assets/js/jquery.min.js"></script>
<script language="JavaScript"><!--
function filebrowser_reload() {
    $('#filebrowser_browser').load("<$ api_url $>?action=render");
}

function filebrowser_api_call(action, target) {
    $.getJSON("<$ api_url $>?action=" + action + "&target=" + target,
      function(result) {
       if(result.notice) {
        $('#filebrowser_notice').text(result.notice);
       }
       if(result.reload) {
        filebrowser_reload();
       }
      }
     )
}

window.onload = function() {
    filebrowser_reload();
};

// setInterval(function(){ filebrowser_reload(); }, 5000);

--></script>

<style type="text/css">
.filebrowser { background: #050505; color: #dddddd; }
.filebrowser td a { color: #ffffff; text-decoration: none; border-bottom: 1px dotted #fff; }
.filebrowser td a:hover { background: #000000; color: #ffffff; outline: dotted #ffffff; }
.filebrowser { width: 100%; padding: 5px; }
.filebrowser .filebrowser_notice { width: 100%; padding: 5px; }
.filebrowser .filebrowser_browser { width: 100%; padding: 5px; }
.filebrowser table { width: 100%; }
.filebrowser .filebrowser_icon { width: 1em; height: 1em; }
.filebrowser td { color: #dddddd; padding-left: 5px; padding-right: 5px; }
.filebrowser img { fill: #dddddd; stroke: #dddddd; }
.filebrowser td.ico { text-align: center; }
.filebrowser tr.odd { background: #101010; }
.filebrowser tr.even  { background: #181818; }
.filebrowser tr:hover  { background: #353535; }
.filebrowser th  { padding-top: 5px; padding-bottom: 5px; background: #252525; color: #ffffff; }
</style>

<div class="filebrowser">
 <div id="filebrowser_notice" class="notice"></div>
 <div id="filebrowser_browser" class="browser"></div>
</div>
</%def>
